name: CI/CD passing variables using 'env'
on:
  workflow_dispatch:
env:
  SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }} # Example of global environment variables used across jobs
  SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
jobs:
  ci_develop_use1:
    runs-on: ubuntu-latest
    environment: develop_use1
    env:
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }} # Example of passing variables using 'env'
      AWS_REGION: ${{ vars.AWS_REGION }}
    outputs:
      docker_image_tag: ${{ steps.docker_image_tag.outputs.docker_image_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: AWS Configure Credentials
        uses: ./actions/aws/configure-creds-2
      - name: Build and push Docker image
        uses: ./action-sets/docker/build-and-push-2
      - name: Generate Docker image tag
        id: docker_image_tag
        run: echo "docker_image_tag=service_foo_develop_use1-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
  cd_develop_use1:
    runs-on: ubuntu-latest
    needs: ci_develop_use1
    environment: develop_use1
    env:
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      SERVICE_NAME: "service_foo_develop_use1"
      ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Send Slack Message - Deployment Started
        uses: ./actions/slack/text-message/send-2
        with:
          text: 'Deployment of ${{ env.SERVICE_NAME }} to ${{ env.AWS_REGION }} is starting :rocket:'
      - name: Sync and wait for ArgoCD
        uses: ./action-sets/argocd/sync-and-wait-2
      - name: Send Slack Message - Deployment Complete
        uses: ./actions/slack/text-message/send-2
        with:
          text: 'Deployment of ${{ env.SERVICE_NAME }} to ${{ env.AWS_REGION }} is complete :rocket:'
  ci_develop_euc1:
    runs-on: ubuntu-latest
    environment: develop_euc1
    env:
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ vars.AWS_REGION }}
    outputs:
      docker_image_tag: ${{ steps.docker_image_tag.outputs.docker_image_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: AWS Configure Credentials
        uses: ./actions/aws/configure-creds-2
      - name: Build and push Docker image
        uses: ./action-sets/docker/build-and-push-2
      - name: Generate Docker image tag
        id: docker_image_tag
        run: echo "docker_image_tag=service_foo_develop_euc1-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
  cd_develop_euc1:
    runs-on: ubuntu-latest
    needs: ci_develop_euc1
    environment: develop_euc1
    env:
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      SERVICE_NAME: "service_foo_develop_euc1"
      ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Send Slack Message - Deployment Started
        uses: ./actions/slack/text-message/send-2
        with:
          text: 'Deployment of ${{ env.SERVICE_NAME }} to ${{ env.AWS_REGION }} is starting :rocket:'
      - name: Sync and wait for ArgoCD
        uses: ./action-sets/argocd/sync-and-wait-2
        with:
          timeout_seconds: '40'
        env:
          SERVICE_NAME: "service_foo_develop_euc1-11111111111111111111111111111111111"  # Example of overriding the env variable
      - name: Send Slack Message - Deployment Complete
        uses: ./actions/slack/text-message/send-2
        with:
          text: 'Deployment of ${{ env.SERVICE_NAME }} to ${{ env.AWS_REGION }} is complete :rocket:'
  cd_final:
    runs-on: ubuntu-latest
    needs: [cd_develop_use1, cd_develop_euc1]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Send Slack Message - all the tags are deployed
        uses: ./actions/slack/text-message/send-2
        with:
          text: 'All tags (${{ needs.ci_develop_use1.outputs.docker_image_tag }}, ${{ needs.ci_develop_euc1.outputs.docker_image_tag }}) are deployed :rocket:'