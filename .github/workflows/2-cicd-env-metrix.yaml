name: CICD Env - Matrix
on:
  workflow_dispatch:

jobs:
  ci_matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env_name: [develop_use1, develop_euc1]
    environment: ${{ matrix.env_name }}
    env:
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ vars.AWS_REGION }}
    outputs:
        tag_develop_use1: ${{ steps.generate_tag.outputs.tag_develop_use1 }}
        tag_develop_euc1: ${{ steps.generate_tag.outputs.tag_develop_euc1 }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: AWS Configure Credentials
        uses: ./actions/aws/configure-creds-2
      - name: Build and push Docker image
        uses: ./action-sets/docker/build-and-push-2
      - name: Generate tag
        id: generate_tag
        run: echo "tag_${{ matrix.env_name }}=v1_${{ matrix.env_name }}" >> $GITHUB_ENV

  print_matrix:
    needs: ci_matrix
    runs-on: ubuntu-latest
    steps:
      - run: echo '${{ toJSON(needs.ci_matrix.outputs) }}'

  cd_matrix:
    needs: ci_matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env_name: [develop_use1, develop_euc1]
    env:
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      SERVICE_NAME: "service_foo_${{ matrix.env_name }}"
      ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Sync and wait for ArgoCD
        uses: ./action-sets/argocd/sync-and-wait-2
        with:
          timeout_seconds: '40'