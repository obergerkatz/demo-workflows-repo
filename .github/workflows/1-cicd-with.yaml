name: CI/CD passing variables using 'with'
on:
  workflow_dispatch:
jobs:
  ci_develop_use1:
    runs-on: ubuntu-latest
    environment: develop_use1
    outputs:
      docker_image_tag: ${{ steps.docker_image_tag.outputs.docker_image_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: AWS Configure Credentials
        uses: ./actions/aws/configure-creds
        with:
          aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
          aws_region: ${{ vars.AWS_REGION }}
      - name: Build and push Docker image
        uses: ./action-sets/docker/build-and-push
        with:
          aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
          aws_region: ${{ vars.AWS_REGION }}
      - name: Generate Docker image tag
        id: docker_image_tag
        run: echo "docker_image_tag=service_foo_develop_use1-$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

  cd_develop_use1:
    runs-on: ubuntu-latest
    needs: ci_develop_use1
    environment: develop_use1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Send Slack Message - Deployment Started
        uses: ./actions/slack/text-message/send
        with:
          text: 'Deployment of service_foo_develop_use1 to ${{ env.AWS_REGION }} is starting :rocket:'
          channel: ${{ secrets.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}
      - name: Sync and wait for ArgoCD
        uses: ./action-sets/argocd/sync-and-wait
        with:
          aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
          aws_region: ${{ vars.AWS_REGION }}
          service_name: "service_foo_develop_use1"
      - name: Send Slack Message - Deployment Complete
        uses: ./actions/slack/text-message/send
        with:
          text: 'Deployment of service_foo_develop_use1 to ${{ env.AWS_REGION }} is complete :rocket:'
          channel: ${{ secrets.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}

  ci_develop_euc1:
    runs-on: ubuntu-latest
    environment: develop_euc1
    outputs:
      docker_image_tag: ${{ steps.docker_image_tag.outputs.docker_image_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: AWS Configure Credentials
        uses: ./actions/aws/configure-creds
        with:
          aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
          aws_region: ${{ vars.AWS_REGION }}
      - name: Build and push Docker image
        uses: ./action-sets/docker/build-and-push
        with:
          aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
          aws_region: ${{ vars.AWS_REGION }}
      - name: Generate Docker image tag
        id: docker_image_tag
        run: echo "docker_image_tag=service_foo_develop_euc1-$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

  cd_develop_euc1:
    runs-on: ubuntu-latest
    needs: ci_develop_euc1
    environment: develop_euc1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Send Slack Message - Deployment Started
        uses: ./actions/slack/text-message/send
        with:
          text: 'Deployment of service_foo_develop_euc1 to ${{ env.AWS_REGION }} is starting :rocket:'
          channel: ${{ secrets.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}
      - name: Sync and wait for ArgoCD
        uses: ./action-sets/argocd/sync-and-wait
        with:
          aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
          aws_region: ${{ vars.AWS_REGION }}
          service_name: "service_foo_develop_euc1"
          timeout_seconds: '40'
      - name: Send Slack Message - Deployment Complete
        uses: ./actions/slack/text-message/send
        with:
          text: 'Deployment of service_foo_develop_euc1 to ${{ env.AWS_REGION }} is complete :rocket:'
          channel: ${{ secrets.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}

  cd_final:
    runs-on: ubuntu-latest
    needs: [ci_develop_use1, ci_develop_euc1, cd_develop_use1, cd_develop_euc1]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Send Slack Message - all the tags are deployed
        uses: ./actions/slack/text-message/send
        with:
          text: 'All tags (${{ needs.ci_develop_use1.outputs.docker_image_tag }}, ${{ needs.ci_develop_euc1.outputs.docker_image_tag }}) are deployed :rocket:'
          channel: ${{ secrets.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}